import streamlit as st
import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image
import timm
import base64
from huggingface_hub import hf_hub_download


# Configuration de la page Streamlit
st.set_page_config(
    page_title="Automatic Plum Sorting | Tri Automatique des Prunes",
    page_icon="üçÉ",
    layout="wide"
)


# -------- Background Image Encoder ----------
def get_base64(file_path):
    with open(file_path, "rb") as f:
        return base64.b64encode(f.read()).decode()

# -------- CSS Advanced Styling --------
def add_custom_css():
    css = f"""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap');
        html, body, .stApp {{
            font-family: 'Inter', sans-serif;
            background-image: url("data:image/png;base64,{get_base64('prune8.jpg')}");
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }}


        /* Appliquer un fond blanc avec arrondis et ombre douce aux blocs */
        .block-white {{
            background-color: rgba(255, 255, 255, 0.92);
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }}

        /* Pour rendre les radios et inputs plus visibles */
        input[type="radio"], .stRadio > div {{
            background-color: black;
            padding: 0.5rem;
            border-radius: 0.5rem;
    
        }}


        /* Titres */
        h1, h2, h3, h4, li, em{{
            color: #1F2937;
        }}

        /* Texte g√©n√©ral */
        p, span, label {{
            color: #374151;
        }}
        
        
         .block{{
            color: #1F2937;
        }}               
        
        .title-text {{
            font-size: 2.5rem;
            font-weight: 800;
            color: #ffffff;
            text-align: center;
            padding: 1rem;
            background: rgba(0,0,0,0.5);
            border-radius: 10px;
        }}
        
        
        /* Boutons */
        .stButton>button {{
            background-color: #00205B;
            color: white;
            font-weight: bold;
            border-radius: 5px;
            padding: 10px 20px;
            width: 100%;
        }}

        /* Personnalisation du label */
        .custom-label {{
            font-size: 20px;
            font-weight: bold;
            color: #003399; /* Bleu fonc√© */
            margin-bottom: 10px;
        }}

        /* Cible le bouton avec la classe par d√©faut g√©n√©r√©e par Streamlit */
        button.css-1n543e5 {{
            background-color: white !important;  
            color: gray !important;
            font-size: 18px !important;
            font-weight: bold !important;
            border: none !important;
            border-radius: 8px !important;
            padding: 12px 24px !important;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1) !important;
            transition: background-color 0.3s ease !important;
        }}

        /* Effet au survol */
        button.css-1n543e5:hover {{
            background-color: skyblue !important;  /* bleu encore plus fonc√© */
            cursor: pointer !important;
        }}

    

        .prediction-box {{
            background-color: rgba(255, 255, 255, 0.85);
            border-left: 5px solid #10B981;
            padding: 1.2rem;
            font-size: 1.4rem;
            font-weight: 600;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-top: 1.5rem;
            text-align: center;
            color: #1F2937;
        }}


        .prediction-box {{
            background-color: rgba(255, 255, 255, 0.9);
            border-left: 8px solid #8B5CF6;
            padding: 1.5rem;
            margin-top: 1rem;
            border-radius: 12px;
            font-size: 22px;
            font-weight: bold;
            color: #1F2937;
            text-align: center;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }}

        div.stAlert {{
                    background-color: skyblue !important;
                    color: white !important;
                    font-weight: bold;
                    border-radius: 10px;
                    padding: 1rem;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
                }}

        /* R√©sultats */
        .result-box {{
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-weight: bold;
            font-size: 20px;
            margin: 10px 0;
        }}
        
        .block {{
            background-color: rgba(255,255,255,0.85);
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            margin-bottom: 2rem;
        }}
        .custom-btn {{
            background-color: #10B981;
            color: white;
            padding: 0.6rem 1.2rem;
            border-radius: 8px;
            border: none;
            font-weight: 600;
            cursor: pointer;
        }}
        .custom-btn:hover {{
            background-color: #059669;
        }}
        

    </style>
    """
    st.markdown(css, unsafe_allow_html=True)



# -------- Load Model --------
@st.cache_resource
def load_model():
    model = timm.create_model('efficientnet_b0', pretrained=False, num_classes=6)
    checkpoint = hf_hub_download(repo_id="RyanYvan/prune-model", filename="best_model (3).pth")
    model.load_state_dict(torch.load(checkpoint, map_location='cpu'))
    model.eval()
    return model

model = load_model()
all_class_names = ['Spotted', 'Cracked', 'Bruised', 'Unaffected', 'Unripe', 'Rotten']

# -------- Sidebar Navigation --------
def navigation(lang):
    #st.sidebar.title("üìÇ Menu")
    return st.sidebar.radio(
        "üìÇ Menu" if lang == "Anglais" else "üìÇ Menu",
        ["üè† Accueil", "üì∏ Pr√©diction", "‚ÑπÔ∏è √Ä propos"]
    )

# -------- Language Selector --------
st.sidebar.image("prune4.jpg")
def select_language():
    return st.sidebar.selectbox("üåê Langue / Language", ["Francais", "Anglais"], index=0)

# -------- Page: Accueil --------
def page_home(t):
    st.markdown("<div class='title-text'>üåø " + t["title"] + "</div>", unsafe_allow_html=True)
    st.markdown(f"<div class='block'>{t['home_text']}</div>", unsafe_allow_html=True)

# -------- Page: Pr√©diction --------
def page_prediction(t):
    st.markdown(f"<div class='block'><h2>üì§ {t['load_image']}</h2></div>", unsafe_allow_html=True)
    
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])

    input_method = st.radio(t["input_method"], [t["upload"], t["camera"]])
    image = None

    if input_method == t["upload"]:
        uploaded_file = st.file_uploader(t["choose_file"], type=["jpg", "jpeg", "png"])
        if uploaded_file:
            image = Image.open(uploaded_file).convert("RGB")
            st.image(image, caption=t["preview"], use_column_width=True)

    else:
        img_file_buffer = st.camera_input(t["capture_image"])
        if img_file_buffer:
            image = Image.open(img_file_buffer).convert("RGB")
            st.image(image, caption=t["preview"], use_column_width=True)

    if image is not None:
        if st.button(t["analyze"], key="analyze_button"):
            img_tensor = transform(image).unsqueeze(0)
            with st.spinner(t["predicting"]):
                outputs = model(img_tensor)
                _, pred = torch.max(outputs, 1)
                st.success(f"üéØ {t['result']} : *{all_class_names[pred.item()]}*")
            st.markdown('</div>', unsafe_allow_html=True)

# -------- Page: √Ä propos --------
def page_about(t):
    st.markdown(f"<div class='block'><h2>‚ÑπÔ∏è {t['about_title']}</h2><p>{t['about_text']}</p></div>", unsafe_allow_html=True)

# -------- Multilingual Text --------
texts = {
    "Francais": {
        "title": "PlumID AI: Application de Classification de Prunes",
        "home_text": """Cette application intelligente utilise l'apprentissage profond pour √©valuer automatiquement l'√©tat de vos prunes.
            Vous pouvez t√©l√©verser une image ou en capturer une avec la cam√©ra de votre appareil. Le syst√®me analysera instantan√©ment
            l'image pour d√©terminer si votre prune est saine, pourrie, trop m√ªre ou appartient √† une autre cat√©gorie.
            <br><br>
            Con√ßue pour √™tre simple et efficace, cette application est id√©ale pour les agriculteurs, les distributeurs et les chercheurs
            souhaitant √©valuer rapidement la qualit√© de leurs r√©coltes. """,
        "load_image": "Chargez une image de prune",
        "input_method": "M√©thode d'entr√©e",
        "upload": "T√©l√©verser une image",
        "camera": "Utiliser la cam√©ra",
        "choose_file": "Choisissez une image...",
        "capture_image": "Capturer une image",
        "preview": "Image charg√©e",
        "analyze": "Analyser",
        "predicting": "Pr√©diction en cours...",
        "result": "Classe pr√©dite",
        "about_title": "√Ä propos",
        "about_text": """Cette application a √©t√© d√©velopp√©e dans le cadre d‚Äôun projet visant √† d√©tecter automatiquement la qualit√© des prunes gr√¢ce √† l‚Äôintelligence artificielle.
            Elle utilise un mod√®le de Deep Learning bas√© sur <strong>EfficientNet-B0</strong> pour classer les prunes selon leur √©tat :
            saine, pourrie, trop m√ªre ou autre.
            <br><br>
            L‚Äôinterface est construite avec <strong>Streamlit</strong> et stylis√©e avec <strong>Tailwind CSS</strong>.
            Le mod√®le est int√©gr√© localement ou via <strong>Hugging Face</strong>.
            <br><br>
            <strong>Fonctionnalit√©s principales :</strong>
            <ul class="list-disc pl-5 mt-2 text-gray-700">
                <li>üì∏ T√©l√©versement d‚Äôimage ou capture par cam√©ra</li>
                <li>‚ö° Pr√©diction instantan√©e</li>
                <li>üåç Interface multilingue</li>
                <li>üì± Design responsive</li>
                <li>üß† Mod√®le EfficientNet-B0</li>
            </ul>
            <br>
            üí° <em>Des suggestions sont les bienvenues pour am√©liorer l‚Äôapplication !</em>"""
    },
    "Anglais": {
        "title": "PlumID AI: Plum Classification App",
        "home_text": """This intelligent application uses deep learning to automatically assess the quality of your prunes.
            You can upload an image or take one with your device‚Äôs camera. The system will instantly analyze it to determine
            whether your prune is healthy, rotten, overripe, or falls into another category.
            <br><br>
            Designed for simplicity and efficiency, this app is ideal for farmers, distributors, and researchers who want
            a fast and effective way to evaluate harvest quality.""",
        "load_image": "Load a plum image",
        "input_method": "Input method",
        "upload": "Upload an image",
        "camera": "Use camera",
        "choose_file": "Choose an image...",
        "capture_image": "Capture an image",
        "preview": "Loaded image",
        "analyze": "Analyze",
        "predicting": "Running prediction...",
        "result": "Predicted class",
        "about_title": "About",
        "about_text": """This application was developed as part of a project aimed at automatically detecting the quality of prunes using artificial intelligence.
            It uses a Deep Learning model based on <strong>EfficientNet-B0</strong> to classify prunes as healthy, rotten, overripe, or other.
            <br><br>
            The interface is built with <strong>Streamlit</strong> and styled using <strong>Tailwind CSS</strong>.
            The model is integrated locally or via <strong>Hugging Face</strong>.
            <br><br>
            <strong>Main features:</strong>
            <ul class="list-disc pl-5 mt-2 text-gray-700">
                <li>üì∏ Image upload or camera capture</li>
                <li>‚ö° Instant prediction</li>
                <li>üåç Multilingual interface</li>
                <li>üì± Responsive design</li>
                <li>üß† EfficientNet-B0 model</li>
            </ul>
            <br>
            üí° <em>Suggestions to improve the app are welcome!</em>"""
    }
}

# -------- App Start --------
def main():
    add_custom_css()
    lang = select_language()
    t = texts[lang]
    page = navigation(lang)

    if page == "üè† Accueil":
        page_home(t)
    elif page == "üì∏ Pr√©diction":
        page_prediction(t)
    elif page == "‚ÑπÔ∏è √Ä propos":
        page_about(t)

if __name__ == "__main__":
    main()
